import sys
import os
# 暂时不用
# 升级python3
msgid_conf = "F:/MyFrame/ProtoToLua/msgid.conf"
targetMsgIDDefine = "F:/MyFrame/Assets/LuaScripts/Net/Config/MsgIDDefine.lua"
targetMsgIDMap = "F:/MyFrame/Assets/LuaScripts/Net/Config/MsgIDMap.lua"


class MsgInfo(object):
    def __init__(self, msgid, msgname, comment):
        self.msgid = msgid
        self.msgname = msgname
        self.comment = comment

    msgid = ""
    msgname = ""
    comment = ""


def ParseMsgIDMap(fs, msgidList):
    fs.writelines("--Generated By msgid-gen-lua Do not Edit")
    fs.writelines("local config = {")

    for _msgDef in msgidList:
        tmpMsgID = _msgDef.msgid
        tmpModuleName = _msgDef.msgname.split(str.encode('.'))[0]
        tmpMsgName = _msgDef.msgname.split(str.encode('.'))[1]
        # fs.writelines("\t[%s] = (require(\"Net.Protol.%s_pb\")).%s,"% (tmpMsgID, tmpModuleName, tmpMsgName));
        sr = '[{}]={}.{}'.format(tmpMsgID, 'World', "dfdf")
        print(sr)
        fs.writelines("\t[%s] =" % (tmpMsgID)+tmpModuleName +
                      str.encode('.') + tmpMsgName + str.encode(','))

        print("\t[%s] =" % (tmpMsgID)+tmpModuleName +
              str.encode('.')+tmpMsgName+str.encode(','))

    fs.writelines("}")
    fs.writelines("return MsgIDMap")

    fs.flush()
    fs.close()


def ParseMsgIDDefine(fs, msgidList):
    fs.writelines("--Generated By msgid-gen-lua Do not Edit")
    fs.writelines("local config = {")

    for _msgDef in msgidList:
        fs.writelines("\t%s = %s, %s" % (_msgDef.msgname.upper().replace(
            str.encode('.'), str.encode('_')), _msgDef.msgid, _msgDef.comment))

    fs.writelines("}")
    fs.writelines("return MsgIDDefine")
    fs.flush()
    fs.close()


def parse_msgfile(msgid_conf):
    msg_info_list = []
    msg_file = open(msgid_conf, "rb")
    for line in msg_file.readlines():
        line = line.strip().rstrip()

        if not len(line) or line.startswith(str.encode('#')):
            continue

        valide = line.split(str.encode('#'))[0]
        valide = valide.strip().rstrip()

        array_info = valide.split(str.encode('='))
        msgid = array_info[0].strip().rstrip()  # MSGID

        if int(msgid) < 1:  # server internal msg
            continue

        # array_info = array_info[1].split(',')	#MSGNAME
        msgname = array_info[1].strip().rstrip()

        # array_info = array_info[1].split("#")
        comment = ""
        # if len(array_info) > 1:
        # comment = "--" + array_info[1].strip().rstrip()
        msg_info_list.append(MsgInfo(msgid, msgname, comment))

    return msg_info_list


class WrapFile:
    fs = None

    def __init__(self, real_file):
        self.fs = real_file

    def writelines(self, s):
        self.fs.write(s + "\n")

    def flush(self):
        self.fs.flush()

    def close(self):
        self.fs.close()


l = parse_msgfile(msgid_conf)

f = WrapFile(open(targetMsgIDDefine, "w", encoding='utf-8'))
ParseMsgIDDefine(f, l)

f = WrapFile(open(targetMsgIDMap, "w", encoding='utf-8'))
ParseMsgIDMap(f, l)
print("finsh")
